using System;

public class StockOption {
    public double S0;
    public double K;
    public double r = 0.05;
    public double T = 1;
    public int N = 2;
    public double pu = 0;
    public double pd = 0;
    public double div = 0;
    public double sigma = 0;
    public bool is_put = false;
    public bool is_am = false;

    public StockOption(double S0, double K, double r = 0.05, double T = 1, int N = 2, double pu = 0, double pd = 0, double div = 0, double sigma = 0, bool is_put = false, bool is_am = false) {
        this.S0 = S0;
        this.K = K;
        this.r = r;
        this.T = T;
        this.N = Math.Max(1, N);
        this.pu = pu;
        this.pd = pd;
        this.div = div;
        this.sigma = sigma;
        this.is_put = is_put;
        this.is_am = is_am;
    }

    public double dt {
        get {
            return T / N;
        }
    }

    public double df {
        get {
            return Math.Exp(-(r - div) * dt);
        }
    }
}


#### A class for American options using a binomial tree
using System;
using System.Linq;

public class BinomialTreeOption : StockOption
{
    private double u;
    private double d;
    private double qu;
    private double qd;

    public BinomialTreeOption(double S0, double K, double r = 0.05, double T = 1, int N = 2, double pu = 0, double pd = 0, double div = 0, double sigma = 0, bool is_put = false, bool is_am = false)
        : base(S0, K, r, T, N, pu, pd, div, sigma, is_put, is_am)
    {
    }

    public void SetupParameters()
    {
        u = 1 + pu;  // Expected value in the up state
        d = 1 - pd;  // Expected value in the down state
        qu = (Math.Exp((r - div) * dt) - d) / (u - d);
        qd = 1 - qu;
    }

    public void InitStockPriceTree()
    {
        // Initialize a 2D tree at T=0
        STs.Add(new double[] { S0 });

        // Simulate the possible stock prices path
        for (int i = 0; i < N; i++)
        {
            var prevBranches = STs.Last();
            var st = prevBranches.Select(x => x * u).Concat(new[] { prevBranches.Last() * d }).ToArray();
            STs.Add(st); // Add nodes at each time step
        }
    }

    public double[] InitPayoffsTree()
    {
        if (is_call)
        {
            return STs[N].Select(x => Math.Max(0, x - K)).ToArray();
        }
        else
        {
            return STs[N].Select(x => Math.Max(0, K - x)).ToArray();
        }
    }

    public double[] CheckEarlyExercise(double[] payoffs, int node)
    {
        if (is_call)
        {
            return payoffs.Zip(STs[node], (x, y) => Math.Max(x, y - K)).ToArray();
        }
        else
        {
            return payoffs.Zip(STs[node], (x, y) => Math.Max(x, K - y)).ToArray();
        }
    }

    public double[] TraverseTree(double[] payoffs)
    {
        for (int i = N - 1; i >= 0; i--)
        {
            // The payoffs from NOT exercising the option
            payoffs = payoffs.Take(payoffs.Length - 1)
                .Zip(payoffs.Skip(1), (x, y) => x * qu + y * qd)
                .Select(x => x * df)
                .ToArray();

            // Payoffs from exercising, for American options
            if (!is_european)
            {
                payoffs = CheckEarlyExercise(payoffs, i);
            }
        }

        return payoffs;
    }

    public double Price()
    {
        SetupParameters();
        InitStockPriceTree();
        var payoffs = InitPayoffsTree();
        var price = TraverseTree(payoffs)[0];
        return price;
    }
}


####The Cox-Ross-Rubinstein model


using System;

class StockOption
{
    public double S0 { get; set; }
    public double K { get; set; }
    public double r { get; set; }
    public double T { get; set; }
    public int N { get; set; }
    public double[] STs { get; set; }
    public double pu { get; set; }
    public double pd { get; set; }
    public double div { get; set; }
    public double sigma { get; set; }
    public bool is_call { get; set; }
    public bool is_european { get; set; }

    public StockOption(double S0, double K, double r = 0.05, double T = 1, int N = 2, double pu = 0, double pd = 0, double div = 0, double sigma = 0, bool is_put = false, bool is_am = false)
    {
        this.S0 = S0;
        this.K = K;
        this.r = r;
        this.T = T;
        this.N = Math.Max(1, N);
        this.STs = new double[N + 1];

        this.pu = pu;
        this.pd = pd;
        this.div = div;
        this.sigma = sigma;
        this.is_call = !is_put;
        this.is_european = !is_am;
    }

    public double dt
    {
        get { return T / (double)N; }
    }

    public double df
    {
        get { return Math.Exp(-(r - div) * dt); }
    }
}

class BinomialTreeOption : StockOption
{
    public BinomialTreeOption(double S0, double K, double r = 0.05, double T = 1, int N = 2, double pu = 0, double pd = 0, double div = 0, double sigma = 0, bool is_put = false, bool is_am = false)
    : base(S0, K, r, T, N, pu, pd, div, sigma, is_put, is_am)
    {
    }

    public void setup_parameters()
    {
        u = 1 + pu; // Expected value in the up state
        d = 1 - pd; // Expected value in the down state
        qu = (Math.Exp((r - div) * dt) - d) / (u - d);
        qd = 1 - qu;
    }

    public void init_stock_price_tree()
    {
        // Initialize a 1D array with the stock price at T=0
        STs[0] = S0;

        // Simulate the possible stock prices path
        for (int i = 1; i <= N; i++)
        {
            double[] prev_branches = new double[i];
            Array.Copy(STs, 0, prev_branches, 0, i);
            STs[i] = prev_branches[i - 1] * u;

            for (int j = i - 1; j >= 1; j--)
            {
                STs[j] = prev_branches[j - 1] * d + prev_branches[j] * u;
            }

            STs[0] = prev_branches[0] * d;
        }
    }

    public double[] init_payoffs_tree()
    {
        double[] payoffs = new double[N + 1];

        if (is_call)
        {
            for (int i = 0; i <= N; i++)
            {



# pas sur a verifier 


using System;

/// <summary>
/// Price an option by the Leisen-Reimer tree
/// </summary>
class BinomialLROption : BinomialTreeOption
{
    public double p;
    public double u;
    public double d;
    public double qu;
    public double qd;

    public BinomialLROption(double S0, double K, double r, double T,
        int N, double sigma, string option_type, double div = 0)
        : base(S0, K, r, T, N, sigma, option_type, div)
    {
    }

    public void setup_parameters()
    {
        int odd_N = (N % 2 == 0) ? N : N + 1;
        double d1 = (Math.Log(S0 / K) +
            ((r - div) + Math.Pow(sigma, 2) / 2) * T) /
            (sigma * Math.Sqrt(T));
        double d2 = (Math.Log(S0 / K) +
            ((r - div) - Math.Pow(sigma, 2) / 2) * T) /
            (sigma * Math.Sqrt(T));

        double pbar = pp_2_inversion(d1, odd_N);
        p = pp_2_inversion(d2, odd_N);
        u = 1 / df * pbar / p;
        d = (1 / df - p * u) / (1 - p);
        qu = p;
        qd = 1 - p;
    }

    private double pp_2_inversion(double z, int n)
    {
        return 0.5 + Math.Sign(z) *
            Math.Sqrt(0.25 - 0.25 *
                Math.Exp(
                    -Math.Pow(z / (n + 1.0 / 3.0 + 0.1 / (n + 1)), 2) * (n + 1.0 / 6.0)
                )
            );
    }
}




using System;

public class BinomialLRWithGreeks
{
    public static void Compute(double S, double K, double r, double sigma, double T, int N)
    {
        double deltaT = T / N;
        double up = Math.Exp(sigma * Math.Sqrt(deltaT));
        double down = 1.0 / up;

        double p = (Math.Exp(r * deltaT) - down) / (up - down);

        double[] price = new double[N + 1];
        double[] delta = new double[N + 1];
        double[] gamma = new double[N + 1];
        double[] theta = new double[N + 1];

        for (int i = 0; i <= N; i++)
        {
            double price_i = S * Math.Pow(up, i) * Math.Pow(down, N - i);
            price[i] = Math.Max(price_i - K, 0.0);

            if (i == 0)
            {
                delta[i] = (price[1] - price[0]) / (S * up - S * down);
                gamma[i] = ((price[1] - price[0]) / (S * up - S * down) - delta[i]) / (0.5 * S * (up - down));
                theta[i] = -(price[1] - price[0]) / (2 * deltaT * S * (up - down));
            }
            else if (i == N)
            {
                delta[i] = (price[N] - price[N - 1]) / (S * up - S * down);
                gamma[i] = (delta[i] - (price[N] - price[N - 1]) / (S * up - S * down) / (0.5 * S * (up - down)));
                theta[i] = -(price[N] - price[N - 1]) / (2 * deltaT * S * (up - down));
            }
            else
            {
                delta[i] = (price[i + 1] - price[i - 1]) / (S * up - S * down);
                gamma[i] = ((price[i + 1] - price[i]) / (S * up - S * S) - (price[i] - price[i - 1]) / (S * down - S * down)) / (0.5 * S * (up - down));
                theta[i] = -(price[i + 1] - price[i - 1]) / (2 * deltaT * S * (up - down));
            }
        }

        double price0 = 0.0;
        double delta0 = (price[1] - price[0]) / (S * up - S * down);
        double gamma0 = ((price[1] - price[0]) / (S * up - S * down) - delta0) / (0.5 * S * (up - down));
        double theta0 = -(price[1] - price[0]) / (2 * deltaT * S * (up - down));

        Console.WriteLine("Price: " + price0);
        Console.WriteLine("Delta: " + delta0);
        Console.WriteLine("Gamma: " + gamma0);
        Console.WriteLine("Theta: " + theta0);
    }
}



using System;

public class TrinomialTreeOption
{
    private readonly double _S;
    private readonly double _K;
    private readonly double _T;
    private readonly double _r;
    private readonly double _sigma;
    private readonly int _N;

    public TrinomialTreeOption(double S, double K, double T, double r, double sigma, int N)
    {
        _S = S;
        _K = K;
        _T = T;
        _r = r;
        _sigma = sigma;
        _N = N;
    }

    private double Up()
    {
        return Math.Exp(_sigma * Math.Sqrt(3 * _T / _N));
    }

    private double Down()
    {
        return 1 / Up();
    }

    private double Middle()
    {
        return 1;
    }

    private double R()
    {
        return Math.Exp(_r * _T / _N);
    }

    private double Rinv()
    {
        return 1 / R();
    }

    private double Pu()
    {
        double up = Up();
        double down = Down();
        double middle = Middle();
        double upProb = (_r - _sigma * _sigma / 2.0) * Math.Sqrt(_T / _N) + _sigma * Math.Sqrt(3.0 * _T / _N);
        upProb = upProb * upProb / (4.0 * _sigma * _sigma / _N);
        double downProb = (_r - _sigma * _sigma / 2.0) * Math.Sqrt(_T / _N) - _sigma * Math.Sqrt(3.0 * _T / _N);
        downProb = downProb * downProb / (4.0 * _sigma * _sigma / _N);
        return (1.0 / 3.0 + (upProb / 2.0)) / (1.0 + up + down);
    }

    private double Pd()
    {
        double up = Up();
        double down = Down();
        double middle = Middle();
        double upProb = (_r - _sigma * _sigma / 2.0) * Math.Sqrt(_T / _N) + _sigma * Math.Sqrt(3.0 * _T / _N);
        upProb = upProb * upProb / (4.0 * _sigma * _sigma / _N);
        double downProb = (_r - _sigma * _sigma / 2.0) * Math.Sqrt(_T / _N) - _sigma * Math.Sqrt(3.0 * _T / _N);
        downProb = downProb * downProb / (4.0 * _sigma * _sigma / _N);
        return (1.0 / 3.0 + (downProb / 2.0)) / (1.0 + up + down);
    }

    private double Pm()
    {
        double up = Up();
        double down = Down();
        double middle = Middle();
        return 1.0 - Pd() - Pu();
    }

    public double Price()
    {
        double[,] stockTree = new double[_N + 1, _N + 1];
        double[,] callTree = new double[_N + 1, _N + 1];
        double[,] putTree = new double[_N + 1, _N + 1];

        // Initialize stock price tree
        for (int i = 0; i <= _N; i++)
        {
            for (int j = 



using System;

public class BinomialCRROption : BinomialTreeOption
{
    public override void SetupParameters()
    {
        u = Math.Exp(sigma * Math.Sqrt(dt));
        d = 1 / u;
        qu = (Math.Exp((r - div) * dt) - d) / (u - d);
        qd = 1 - qu;
    }
}


using System;


public class BinomialCRRLattice : BinomialCRROption
{
    private int M;

    public override void SetupParameters()
    {
        base.SetupParameters();
        M = 2 * N + 1;
    }

    public override void InitStockPriceTree()
    {
        STs = new double[M];
        STs[0] = S0 * Math.Pow(u, N);

        for (int i = 1; i < M; i++)
        {
            STs[i] = STs[i - 1] * d;
        }
    }

    public override double[] InitPayoffsTree()
    {
        double[] payoffs = new double[M];
        double[] oddNodes = new double[N + 1];
        for (int i = 0; i <= N; i++)
        {
            oddNodes[i] = STs[2 * i + 1];
        }

        if (IsCall)
        {
            for (int i = 0; i <= N; i++)
            {
                payoffs[i] = Math.Max(0, oddNodes[i] - K);
            }
        }
        else
        {
            for (int i = 0; i <= N; i++)
            {
                payoffs[i] = Math.Max(0, K - oddNodes[i]);
            }
        }

        return payoffs;
    }

    public override double[] CheckEarlyExercise(double[] payoffs, double[] previousNodes, int node)
    {
        double[] oddSTs = new double[N + 1];
        for (int i = 0; i <= N; i++)
        {
            oddSTs[i] = previousNodes[2 * i + 1];
        }

        if (IsCall)
        {
            for (int i = 0; i <= N; i++)
            {
                payoffs[i] = Math.Max(payoffs[i], oddSTs[i] - K);
            }
        }
        else
        {
            for (int i = 0; i <= N; i++)
            {
                payoffs[i] = Math.Max(payoffs[i], K - oddSTs[i]);
            }
        }

        return payoffs;
    }
}



using System;

public class TrinomialLattice : TrinomialTreeOption
{
    private int M;

    public override void SetupParameters()
    {
        base.SetupParameters();
        M = 2 * N + 1;
    }

    public override void InitStockPriceTree()
    {
        STs = new double[M];
        STs[0] = S0 * Math.Pow(u, N);

        for (int i = 1; i < M; i++)
        {
            STs[i] = STs[i - 1] * d;
        }
    }

    public override double[] InitPayoffsTree()
    {
        double[] payoffs = new double[M];
        if (is_call)
        {
            for (int i = 0; i < M; i++)
            {
                payoffs[i] = Math.Max(0, STs[i] - K);
            }
        }
        else
        {
            for (int i = 0; i < M; i++)
            {
                payoffs[i] = Math.Max(0, K - STs[i]);
            }
        }
        return payoffs;
    }

    public override double[] CheckEarlyExercise(double[] payoffs, int node)
    {
        double[] odd_STs = new double[N + 1];
        for (int i = 0; i < N + 1; i++)
        {
            odd_STs[i] = STs[2 * i + 1];
        }
        if (is_call)
        {
            for (int i = 0; i < N + 1; i++)
            {
                payoffs[i] = Math.Max(payoffs[i], odd_STs[i] - K);
            }
        }
        else
        {
            for (int i = 0; i < N + 1; i++)
            {
                payoffs[i] = Math.Max(payoffs[i], K - odd_STs[i]);
            }
        }
        return payoffs;
    }
}




using System;
using System.Linq;

public abstract class FiniteDifferences
{
    protected double S0;
    protected double K;
    protected double r;
    protected double T;
    protected double sigma;
    protected double Smax;
    protected int M;
    protected int N;
    protected bool is_call;

    protected double[] i_values;
    protected double[] j_values;
    protected double[,] grid;
    protected double[] boundary_conds;

    public FiniteDifferences(
        double S0, double K, double r = 0.05, double T = 1,
        double sigma = 0, double Smax = 1, int M = 1, int N = 1, bool is_put = false)
    {
        this.S0 = S0;
        this.K = K;
        this.r = r;
        this.T = T;
        this.sigma = sigma;
        this.Smax = Smax;
        this.M = M;
        this.N = N;
        this.is_call = !is_put;

        this.i_values = Enumerable.Range(0, M).Select(x => (double)x).ToArray();
        this.j_values = Enumerable.Range(0, N).Select(x => (double)x).ToArray();
        this.grid = new double[M + 1, N + 1];
        this.boundary_conds = Enumerable.Range(0, M + 1).Select(x => Smax * ((double)x / M)).ToArray();
    }

    public double dS
    {
        get { return Smax / (double)M; }
    }

    public double dt
    {
        get { return T / (double)N; }
    }

    public abstract void SetupBoundaryConditions();

    public abstract void SetupCoefficients();

    public abstract void TraverseGrid();

    public virtual double Interpolate()
    {
        return Interpolate(S0);
    }

    public virtual double Interpolate(double S)
    {
        return Interpolate(boundary_conds, grid.GetColumn(0), S);
    }

    protected double Interpolate(double[] xArr, double[] yArr, double x)
    {
        if (x < xArr[0])
        {
            return yArr[0];
        }
        else if (x > xArr[xArr.Length - 1])
        {
            return yArr[yArr.Length - 1];
        }
        else
        {
            int index = Array.BinarySearch(xArr, x);
            if (index >= 0)
            {
                return yArr[index];
            }
            else
            {
                int i1 = ~index - 1;
                int i2 = ~index;
                double x1 = xArr[i1];
                double x2 = xArr[i2];
                double y1 = yArr[i1];
                double y2 = yArr[i2];
                return y1 + (x - x1) * (y2 - y1) / (x2 - x1);
            }
        }
    }

    public virtual double Price()
    {
        SetupBoundaryConditions();
        SetupCoefficients();
        TraverseGrid();
        return Interpolate();
    }
}


using System;
using System.Linq;

public class FDExplicitEu : FiniteDifferences
{
    public override void SetupBoundaryConditions()
    {
        if (IsCall)
        {
            Grid[0..^1, ^1] = BoundaryConds.Select(x => Math.Max(0, x - K)).ToArray();
            Grid[^1, 0..^1] = (Smax - K) * Math.Exp(-r * dt * (N - JValues));
        }
        else
        {
            Grid[0..^1, ^1] = BoundaryConds.Select(x => Math.Max(0, K - x)).ToArray();
            Grid[0, 0..^1] = (K - Smax) * Math.Exp(-r * dt * (N - JValues));
        }
    }

    public override void SetupCoefficients()
    {
        a = 0.5 * dt * ((sigma * sigma) *
            (IValues.Select(x => (double)x * x).ToArray()) -
            r * IValues.Select(x => (double)x).ToArray());
        b = 1 - dt * ((sigma * sigma) *
            (IValues.Select(x => (double)x * x).ToArray()) +
            r);
        c = 0.5 * dt * ((sigma * sigma) *
            (IValues.Select(x => (double)x * x).ToArray()) +
            r * IValues.Select(x => (double)x).ToArray());
    }

    public override void TraverseGrid()
    {
        for (int j = N - 1; j >= 0; j--)
        {
            for (int i = 2; i < M; i++)
            {
                Grid[i, j] = a[i] * Grid[i - 1, j + 1] +
                    b[i] * Grid[i, j + 1] +
                    c[i] * Grid[i + 1, j + 1];
            }
        }
    }

    public override double Interpolate()
    {
        return MathNet.Numerics.Interpolation.Linear
            .InterpolateSorted(BoundaryConds, Grid.Column(0), S0);
    }

    public override double Price()
    {
        SetupBoundaryConditions();
        SetupCoefficients();
        TraverseGrid();
        return Interpolate();
    }
}



using System;
using System.Linq;
using MathNet.Numerics.LinearAlgebra;

class FDImplicitEu : FDExplicitEu
{
    public override void SetupCoefficients()
    {
        a = 0.5 * (r * dt * i_values - Math.Pow(sigma, 2) * dt * i_values.PointwisePower(2));
        b = 1 + Math.Pow(sigma, 2) * dt * i_values.PointwisePower(2) + r * dt;
        c = -0.5 * (r * dt * i_values + Math.Pow(sigma, 2) * dt * i_values.PointwisePower(2));

        var diagMinusOne = Vector<double>.Build.DenseOfEnumerable(a.GetEnumerable(1, M - 2));
        var diag = Vector<double>.Build.DenseOfEnumerable(b.GetEnumerable(1, M - 1));
        var diagPlusOne = Vector<double>.Build.DenseOfEnumerable(c.GetEnumerable(0, M - 2));

        coeffs = DiagonalMatrix.OfDiagonal(M - 1, M - 1, diag) +
                 DiagonalMatrix.OfDiagonal(M - 2, M - 1, diagMinusOne, -1) +
                 DiagonalMatrix.OfDiagonal(M - 1, M - 2, diagPlusOne, 1);
    }

    public override void TraverseGrid()
    {
        /* Solve using linear systems of equations */
        var plu = coeffs.LU();
        var aux = Vector<double>.Build.Dense(M - 1);

        for (int j = N - 1; j >= 0; j--)
        {
            aux[0] = -a[1] * grid[0, j];
            var x1 = plu.LowerSolve(grid.SubMatrix(1, M - 1, j + 1, 1) + aux);
            var x2 = plu.UpperSolve(x1);
            grid.SetSubMatrix(1, j, x2);
        }
    }
}



using System;

public class FDCnDo : FDCnEu
{
    public double Barrier { get; }
    public double[] BoundaryConditions { get; }
    public double[] IValues { get; }

    public FDCnDo(double S0, double K, double r=0.05, double T=1, double sigma=0, double Sbarrier=0, double Smax=1, int M=1, int N=1, bool is_put=false) : base(S0, K, r, T, sigma, Smax, M, N, is_put)
    {
        Barrier = Sbarrier;
        BoundaryConditions = new double[M + 1];
        for (int i = 0; i <= M; i++)
        {
            BoundaryConditions[i] = Sbarrier + i * dS;
        }
        IValues = new double[M + 1];
        for (int i = 0; i <= M; i++)
        {
            IValues[i] = BoundaryConditions[i] / dS;
        }
    }

    public double dS
    {
        get { return (Smax - Barrier) / Convert.ToDouble(M); }
    }
}
